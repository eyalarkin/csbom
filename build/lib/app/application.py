import json
import csv

# Internal function
# PARAMS: `component` - JSON object as dict, individual entry in `components`
#                       array in sbom output file
# RETURNS: tuple of 5 strings, data to be written to single row in CSV
def __get_data(component):
    # For each category, return either its value or None if it is nonexistent
    try:
        bomref = component["bom-ref"]
    except:
        bomref = 'None'

    try:
        name = component["name"]
    except:
        name = 'None'

    try:
        hashes = component["hashes"][0]["alg"] + ": " + component["hashes"][0]["content"]
    except:
        hashes = 'None'

    try:
        mimetype = component["mime-type"]
    except:
        mimetype = 'None'

    try:
        mode = component["mode"]
    except:
        mode = 'None'


    return bomref, name, hashes, mimetype, mode

# Internal function
# PARAMS: `bomref` - string, the bom-ref (component ID) of the component to
#                    search for
#         `data` - JSON object as dict, the data that the function is searching
#                  within
# RETURNS: tuple containing information of the component with the bomref in
#          the `bomref` parameter
def __get_dep_data(bomref, data):

    # searching all components for the one that matches the bomref input
    for comp in data['components']:
        # if bomref matches, return name, type, and purl of component
        if comp['bom-ref'] == bomref:
            return comp['name'], comp['type'], comp['purl']

    # if no bomref matches, check the component in metadata
    if data['metadata']['component']['bom-ref'] == bomref:
        return data['metadata']['component']['name'], data['metadata']['component']['type'], data['metadata']['component']['purl']

    # finally, if nothing is found, return None as strings
    return 'None', 'None', 'None'

def __get_git_data(component):
    bomref = component['bom-ref']
    name = component['name']
    author = 'None'
    message = 'None'
    timestamp = 'None'
    for property in component['properties']:
        if property['name'] == 'Author':
            author = property['value']
        elif property['name'] == 'Message':
            message = property['value']
        elif property['name'] == 'Timestamp':
            timestamp = property['value']

    return bomref, name, author, message, timestamp

# PARAMS: `sbom` - string, path to sbom generated by valint
#         `write_file` - string, name of output file (csv format)
# RETURNS: void
def parse_sbom(sbom, write_file):
    # opening sbom
   f = open(sbom)

   # parsing json data from sbom into python dict
   data = json.load(f)

   # opening `write_file` in write mode
   with open(write_file, 'w', newline='') as csv_file:
      # defining cols
      csv_writer = csv.writer(csv_file)
      csv_writer.writerow(['bomref', 'name', 'hash', 'mimetype', 'mode'])
      # populating each row with entry in components array
      for comp in data['components']:
        if comp['type'] == 'file':
            bomref, name, hashes, mimetype, mode = __get_data(comp)
            csv_writer.writerow([bomref, name, hashes, mimetype, mode])

   f.close()

# PARAMS: `sbom` - string, path to sbom file
# RETURNS: boolean representing whether sbom has dependencies
def dependencies(sbom):
    f = open(sbom)
    data = json.load(f)
    try:
        data['dependencies']
        ret = True
    except:
        ret = False

    return ret

# PARAMS: `sbom` - string, path to sbom generated by valint
#         `write_file` - string, name of output file (csv format)
# RETURNS: void
def parse_dependencies(sbom, write_file):
    # open file and load into dictionary
    f = open(sbom)
    data = json.load(f)

    # create and open file to write to
    with open(write_file, 'w', newline='') as csv_file:
        # writing column names (headers)
        csv_writer = csv.writer(csv_file)
        csv_writer.writerow(['depender-bom-ref', 'depender-name', 'depender-type', 'depender-purl', 'dependee-bom-ref', 'dependee-name', 'dependee-type', 'dependee-purl'])

        # search every depender in `dependencies`
        for depender in data['dependencies']:
            depender_bomref = depender['ref']
            # grab name, type, and purl of current depender
            depender_name, depender_type, depender_purl = __get_dep_data(depender_bomref, data)

            # search all dependees of current depender
            for dependee in depender['dependsOn']:
                # grab name, type, and purl of current dependee
                dependee_name, dependee_type, dependee_purl = __get_dep_data(dependee, data)
                # write a row with the current depender and dependee info
                csv_writer.writerow([depender_bomref, depender_name, depender_type, depender_purl, dependee, dependee_name, dependee_type, dependee_purl])

    # closing file
    f.close()

def parse_git_data(sbom, write_file):
    f = open(sbom)
    data = json.load(f)

    with open(write_file, 'w', newline='') as csv_file:
        csv_writer = csv.writer(csv_file)
        csv_writer.writerow(['bomref', 'type', 'name', 'commit-author', 'commit-message', 'commit-timestamp'])

        for component in data['components']:
            type = component['type']
            if type == 'commit':
                bomref, name, author, message, timestamp = __get_git_data(component)
                csv_writer.writerow([bomref, name, type, author, message, timestamp])

    f.close()
